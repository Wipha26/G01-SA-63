// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/wipha26/app/ent/dispense"
	"github.com/wipha26/app/ent/drug"
	"github.com/wipha26/app/ent/patient"
	"github.com/wipha26/app/ent/predicate"
	"github.com/wipha26/app/ent/user"
)

// DispenseUpdate is the builder for updating Dispense entities.
type DispenseUpdate struct {
	config
	hooks      []Hook
	mutation   *DispenseMutation
	predicates []predicate.Dispense
}

// Where adds a new predicate for the builder.
func (du *DispenseUpdate) Where(ps ...predicate.Dispense) *DispenseUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetNote sets the note field.
func (du *DispenseUpdate) SetNote(s string) *DispenseUpdate {
	du.mutation.SetNote(s)
	return du
}

// SetDrugID sets the drug edge to Drug by id.
func (du *DispenseUpdate) SetDrugID(id int) *DispenseUpdate {
	du.mutation.SetDrugID(id)
	return du
}

// SetNillableDrugID sets the drug edge to Drug by id if the given value is not nil.
func (du *DispenseUpdate) SetNillableDrugID(id *int) *DispenseUpdate {
	if id != nil {
		du = du.SetDrugID(*id)
	}
	return du
}

// SetDrug sets the drug edge to Drug.
func (du *DispenseUpdate) SetDrug(d *Drug) *DispenseUpdate {
	return du.SetDrugID(d.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (du *DispenseUpdate) SetPatientID(id int) *DispenseUpdate {
	du.mutation.SetPatientID(id)
	return du
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (du *DispenseUpdate) SetNillablePatientID(id *int) *DispenseUpdate {
	if id != nil {
		du = du.SetPatientID(*id)
	}
	return du
}

// SetPatient sets the patient edge to Patient.
func (du *DispenseUpdate) SetPatient(p *Patient) *DispenseUpdate {
	return du.SetPatientID(p.ID)
}

// SetUserID sets the user edge to User by id.
func (du *DispenseUpdate) SetUserID(id int) *DispenseUpdate {
	du.mutation.SetUserID(id)
	return du
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (du *DispenseUpdate) SetNillableUserID(id *int) *DispenseUpdate {
	if id != nil {
		du = du.SetUserID(*id)
	}
	return du
}

// SetUser sets the user edge to User.
func (du *DispenseUpdate) SetUser(u *User) *DispenseUpdate {
	return du.SetUserID(u.ID)
}

// Mutation returns the DispenseMutation object of the builder.
func (du *DispenseUpdate) Mutation() *DispenseMutation {
	return du.mutation
}

// ClearDrug clears the drug edge to Drug.
func (du *DispenseUpdate) ClearDrug() *DispenseUpdate {
	du.mutation.ClearDrug()
	return du
}

// ClearPatient clears the patient edge to Patient.
func (du *DispenseUpdate) ClearPatient() *DispenseUpdate {
	du.mutation.ClearPatient()
	return du
}

// ClearUser clears the user edge to User.
func (du *DispenseUpdate) ClearUser() *DispenseUpdate {
	du.mutation.ClearUser()
	return du
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DispenseUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.Note(); ok {
		if err := dispense.NoteValidator(v); err != nil {
			return 0, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DispenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DispenseUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DispenseUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DispenseUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DispenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dispense.Table,
			Columns: dispense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dispense.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dispense.FieldNote,
		})
	}
	if du.mutation.DrugCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.DrugTable,
			Columns: []string{dispense.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.DrugTable,
			Columns: []string{dispense.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.PatientTable,
			Columns: []string{dispense.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.PatientTable,
			Columns: []string{dispense.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.UserTable,
			Columns: []string{dispense.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.UserTable,
			Columns: []string{dispense.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dispense.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DispenseUpdateOne is the builder for updating a single Dispense entity.
type DispenseUpdateOne struct {
	config
	hooks    []Hook
	mutation *DispenseMutation
}

// SetNote sets the note field.
func (duo *DispenseUpdateOne) SetNote(s string) *DispenseUpdateOne {
	duo.mutation.SetNote(s)
	return duo
}

// SetDrugID sets the drug edge to Drug by id.
func (duo *DispenseUpdateOne) SetDrugID(id int) *DispenseUpdateOne {
	duo.mutation.SetDrugID(id)
	return duo
}

// SetNillableDrugID sets the drug edge to Drug by id if the given value is not nil.
func (duo *DispenseUpdateOne) SetNillableDrugID(id *int) *DispenseUpdateOne {
	if id != nil {
		duo = duo.SetDrugID(*id)
	}
	return duo
}

// SetDrug sets the drug edge to Drug.
func (duo *DispenseUpdateOne) SetDrug(d *Drug) *DispenseUpdateOne {
	return duo.SetDrugID(d.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (duo *DispenseUpdateOne) SetPatientID(id int) *DispenseUpdateOne {
	duo.mutation.SetPatientID(id)
	return duo
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (duo *DispenseUpdateOne) SetNillablePatientID(id *int) *DispenseUpdateOne {
	if id != nil {
		duo = duo.SetPatientID(*id)
	}
	return duo
}

// SetPatient sets the patient edge to Patient.
func (duo *DispenseUpdateOne) SetPatient(p *Patient) *DispenseUpdateOne {
	return duo.SetPatientID(p.ID)
}

// SetUserID sets the user edge to User by id.
func (duo *DispenseUpdateOne) SetUserID(id int) *DispenseUpdateOne {
	duo.mutation.SetUserID(id)
	return duo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (duo *DispenseUpdateOne) SetNillableUserID(id *int) *DispenseUpdateOne {
	if id != nil {
		duo = duo.SetUserID(*id)
	}
	return duo
}

// SetUser sets the user edge to User.
func (duo *DispenseUpdateOne) SetUser(u *User) *DispenseUpdateOne {
	return duo.SetUserID(u.ID)
}

// Mutation returns the DispenseMutation object of the builder.
func (duo *DispenseUpdateOne) Mutation() *DispenseMutation {
	return duo.mutation
}

// ClearDrug clears the drug edge to Drug.
func (duo *DispenseUpdateOne) ClearDrug() *DispenseUpdateOne {
	duo.mutation.ClearDrug()
	return duo
}

// ClearPatient clears the patient edge to Patient.
func (duo *DispenseUpdateOne) ClearPatient() *DispenseUpdateOne {
	duo.mutation.ClearPatient()
	return duo
}

// ClearUser clears the user edge to User.
func (duo *DispenseUpdateOne) ClearUser() *DispenseUpdateOne {
	duo.mutation.ClearUser()
	return duo
}

// Save executes the query and returns the updated entity.
func (duo *DispenseUpdateOne) Save(ctx context.Context) (*Dispense, error) {
	if v, ok := duo.mutation.Note(); ok {
		if err := dispense.NoteValidator(v); err != nil {
			return nil, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}

	var (
		err  error
		node *Dispense
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DispenseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DispenseUpdateOne) SaveX(ctx context.Context) *Dispense {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DispenseUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DispenseUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DispenseUpdateOne) sqlSave(ctx context.Context) (d *Dispense, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dispense.Table,
			Columns: dispense.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dispense.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Dispense.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dispense.FieldNote,
		})
	}
	if duo.mutation.DrugCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.DrugTable,
			Columns: []string{dispense.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DrugIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.DrugTable,
			Columns: []string{dispense.DrugColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: drug.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.PatientTable,
			Columns: []string{dispense.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.PatientTable,
			Columns: []string{dispense.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.UserTable,
			Columns: []string{dispense.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dispense.UserTable,
			Columns: []string{dispense.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Dispense{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dispense.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
