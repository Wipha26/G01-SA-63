// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/wipha26/app/ent/dispense"
	"github.com/wipha26/app/ent/drug"
	"github.com/wipha26/app/ent/patient"
	"github.com/wipha26/app/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDispense = "Dispense"
	TypeDrug     = "Drug"
	TypePatient  = "Patient"
	TypeUser     = "User"
)

// DispenseMutation represents an operation that mutate the Dispenses
// nodes in the graph.
type DispenseMutation struct {
	config
	op             Op
	typ            string
	id             *int
	note           *string
	clearedFields  map[string]struct{}
	drug           *int
	cleareddrug    bool
	patient        *int
	clearedpatient bool
	user           *int
	cleareduser    bool
	done           bool
	oldValue       func(context.Context) (*Dispense, error)
}

var _ ent.Mutation = (*DispenseMutation)(nil)

// dispenseOption allows to manage the mutation configuration using functional options.
type dispenseOption func(*DispenseMutation)

// newDispenseMutation creates new mutation for $n.Name.
func newDispenseMutation(c config, op Op, opts ...dispenseOption) *DispenseMutation {
	m := &DispenseMutation{
		config:        c,
		op:            op,
		typ:           TypeDispense,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDispenseID sets the id field of the mutation.
func withDispenseID(id int) dispenseOption {
	return func(m *DispenseMutation) {
		var (
			err   error
			once  sync.Once
			value *Dispense
		)
		m.oldValue = func(ctx context.Context) (*Dispense, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dispense.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDispense sets the old Dispense of the mutation.
func withDispense(node *Dispense) dispenseOption {
	return func(m *DispenseMutation) {
		m.oldValue = func(context.Context) (*Dispense, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DispenseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DispenseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DispenseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNote sets the note field.
func (m *DispenseMutation) SetNote(s string) {
	m.note = &s
}

// Note returns the note value in the mutation.
func (m *DispenseMutation) Note() (r string, exists bool) {
	v := m.note
	if v == nil {
		return
	}
	return *v, true
}

// OldNote returns the old note value of the Dispense.
// If the Dispense object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DispenseMutation) OldNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNote is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNote: %w", err)
	}
	return oldValue.Note, nil
}

// ResetNote reset all changes of the "note" field.
func (m *DispenseMutation) ResetNote() {
	m.note = nil
}

// SetDrugID sets the drug edge to Drug by id.
func (m *DispenseMutation) SetDrugID(id int) {
	m.drug = &id
}

// ClearDrug clears the drug edge to Drug.
func (m *DispenseMutation) ClearDrug() {
	m.cleareddrug = true
}

// DrugCleared returns if the edge drug was cleared.
func (m *DispenseMutation) DrugCleared() bool {
	return m.cleareddrug
}

// DrugID returns the drug id in the mutation.
func (m *DispenseMutation) DrugID() (id int, exists bool) {
	if m.drug != nil {
		return *m.drug, true
	}
	return
}

// DrugIDs returns the drug ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DrugID instead. It exists only for internal usage by the builders.
func (m *DispenseMutation) DrugIDs() (ids []int) {
	if id := m.drug; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDrug reset all changes of the "drug" edge.
func (m *DispenseMutation) ResetDrug() {
	m.drug = nil
	m.cleareddrug = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *DispenseMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *DispenseMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *DispenseMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *DispenseMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *DispenseMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *DispenseMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetUserID sets the user edge to User by id.
func (m *DispenseMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to User.
func (m *DispenseMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *DispenseMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *DispenseMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *DispenseMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *DispenseMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Op returns the operation name.
func (m *DispenseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Dispense).
func (m *DispenseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DispenseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.note != nil {
		fields = append(fields, dispense.FieldNote)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DispenseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dispense.FieldNote:
		return m.Note()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DispenseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dispense.FieldNote:
		return m.OldNote(ctx)
	}
	return nil, fmt.Errorf("unknown Dispense field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DispenseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dispense.FieldNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNote(v)
		return nil
	}
	return fmt.Errorf("unknown Dispense field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DispenseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DispenseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DispenseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dispense numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DispenseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DispenseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DispenseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dispense nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DispenseMutation) ResetField(name string) error {
	switch name {
	case dispense.FieldNote:
		m.ResetNote()
		return nil
	}
	return fmt.Errorf("unknown Dispense field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DispenseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.drug != nil {
		edges = append(edges, dispense.EdgeDrug)
	}
	if m.patient != nil {
		edges = append(edges, dispense.EdgePatient)
	}
	if m.user != nil {
		edges = append(edges, dispense.EdgeUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DispenseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dispense.EdgeDrug:
		if id := m.drug; id != nil {
			return []ent.Value{*id}
		}
	case dispense.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case dispense.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DispenseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DispenseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DispenseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddrug {
		edges = append(edges, dispense.EdgeDrug)
	}
	if m.clearedpatient {
		edges = append(edges, dispense.EdgePatient)
	}
	if m.cleareduser {
		edges = append(edges, dispense.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DispenseMutation) EdgeCleared(name string) bool {
	switch name {
	case dispense.EdgeDrug:
		return m.cleareddrug
	case dispense.EdgePatient:
		return m.clearedpatient
	case dispense.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DispenseMutation) ClearEdge(name string) error {
	switch name {
	case dispense.EdgeDrug:
		m.ClearDrug()
		return nil
	case dispense.EdgePatient:
		m.ClearPatient()
		return nil
	case dispense.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Dispense unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DispenseMutation) ResetEdge(name string) error {
	switch name {
	case dispense.EdgeDrug:
		m.ResetDrug()
		return nil
	case dispense.EdgePatient:
		m.ResetPatient()
		return nil
	case dispense.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Dispense edge %s", name)
}

// DrugMutation represents an operation that mutate the Drugs
// nodes in the graph.
type DrugMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	dispenses        map[int]struct{}
	removeddispenses map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Drug, error)
}

var _ ent.Mutation = (*DrugMutation)(nil)

// drugOption allows to manage the mutation configuration using functional options.
type drugOption func(*DrugMutation)

// newDrugMutation creates new mutation for $n.Name.
func newDrugMutation(c config, op Op, opts ...drugOption) *DrugMutation {
	m := &DrugMutation{
		config:        c,
		op:            op,
		typ:           TypeDrug,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrugID sets the id field of the mutation.
func withDrugID(id int) drugOption {
	return func(m *DrugMutation) {
		var (
			err   error
			once  sync.Once
			value *Drug
		)
		m.oldValue = func(ctx context.Context) (*Drug, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Drug.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrug sets the old Drug of the mutation.
func withDrug(node *Drug) drugOption {
	return func(m *DrugMutation) {
		m.oldValue = func(context.Context) (*Drug, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrugMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrugMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DrugMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *DrugMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *DrugMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *DrugMutation) ResetName() {
	m.name = nil
}

// AddDispenseIDs adds the dispenses edge to Dispense by ids.
func (m *DrugMutation) AddDispenseIDs(ids ...int) {
	if m.dispenses == nil {
		m.dispenses = make(map[int]struct{})
	}
	for i := range ids {
		m.dispenses[ids[i]] = struct{}{}
	}
}

// RemoveDispenseIDs removes the dispenses edge to Dispense by ids.
func (m *DrugMutation) RemoveDispenseIDs(ids ...int) {
	if m.removeddispenses == nil {
		m.removeddispenses = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddispenses[ids[i]] = struct{}{}
	}
}

// RemovedDispenses returns the removed ids of dispenses.
func (m *DrugMutation) RemovedDispensesIDs() (ids []int) {
	for id := range m.removeddispenses {
		ids = append(ids, id)
	}
	return
}

// DispensesIDs returns the dispenses ids in the mutation.
func (m *DrugMutation) DispensesIDs() (ids []int) {
	for id := range m.dispenses {
		ids = append(ids, id)
	}
	return
}

// ResetDispenses reset all changes of the "dispenses" edge.
func (m *DrugMutation) ResetDispenses() {
	m.dispenses = nil
	m.removeddispenses = nil
}

// Op returns the operation name.
func (m *DrugMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Drug).
func (m *DrugMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DrugMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, drug.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DrugMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case drug.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DrugMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case drug.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Drug field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) SetField(name string, value ent.Value) error {
	switch name {
	case drug.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DrugMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DrugMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Drug numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DrugMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DrugMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrugMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Drug nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DrugMutation) ResetField(name string) error {
	switch name {
	case drug.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DrugMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dispenses != nil {
		edges = append(edges, drug.EdgeDispenses)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DrugMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeDispenses:
		ids := make([]ent.Value, 0, len(m.dispenses))
		for id := range m.dispenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DrugMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddispenses != nil {
		edges = append(edges, drug.EdgeDispenses)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DrugMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeDispenses:
		ids := make([]ent.Value, 0, len(m.removeddispenses))
		for id := range m.removeddispenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DrugMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DrugMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DrugMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Drug unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DrugMutation) ResetEdge(name string) error {
	switch name {
	case drug.EdgeDispenses:
		m.ResetDispenses()
		return nil
	}
	return fmt.Errorf("unknown Drug edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op               Op
	typ              string
	id               *int
	firstname        *string
	lastname         *string
	cardid           *string
	allergic         *string
	age              *int
	addage           *int
	brithday         *time.Time
	clearedFields    map[string]struct{}
	dispenses        map[int]struct{}
	removeddispenses map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFirstname sets the firstname field.
func (m *PatientMutation) SetFirstname(s string) {
	m.firstname = &s
}

// Firstname returns the firstname value in the mutation.
func (m *PatientMutation) Firstname() (r string, exists bool) {
	v := m.firstname
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstname returns the old firstname value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldFirstname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFirstname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFirstname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstname: %w", err)
	}
	return oldValue.Firstname, nil
}

// ResetFirstname reset all changes of the "firstname" field.
func (m *PatientMutation) ResetFirstname() {
	m.firstname = nil
}

// SetLastname sets the lastname field.
func (m *PatientMutation) SetLastname(s string) {
	m.lastname = &s
}

// Lastname returns the lastname value in the mutation.
func (m *PatientMutation) Lastname() (r string, exists bool) {
	v := m.lastname
	if v == nil {
		return
	}
	return *v, true
}

// OldLastname returns the old lastname value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldLastname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastname: %w", err)
	}
	return oldValue.Lastname, nil
}

// ResetLastname reset all changes of the "lastname" field.
func (m *PatientMutation) ResetLastname() {
	m.lastname = nil
}

// SetCardid sets the cardid field.
func (m *PatientMutation) SetCardid(s string) {
	m.cardid = &s
}

// Cardid returns the cardid value in the mutation.
func (m *PatientMutation) Cardid() (r string, exists bool) {
	v := m.cardid
	if v == nil {
		return
	}
	return *v, true
}

// OldCardid returns the old cardid value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldCardid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCardid is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCardid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCardid: %w", err)
	}
	return oldValue.Cardid, nil
}

// ResetCardid reset all changes of the "cardid" field.
func (m *PatientMutation) ResetCardid() {
	m.cardid = nil
}

// SetAllergic sets the allergic field.
func (m *PatientMutation) SetAllergic(s string) {
	m.allergic = &s
}

// Allergic returns the allergic value in the mutation.
func (m *PatientMutation) Allergic() (r string, exists bool) {
	v := m.allergic
	if v == nil {
		return
	}
	return *v, true
}

// OldAllergic returns the old allergic value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAllergic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAllergic is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAllergic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllergic: %w", err)
	}
	return oldValue.Allergic, nil
}

// ResetAllergic reset all changes of the "allergic" field.
func (m *PatientMutation) ResetAllergic() {
	m.allergic = nil
}

// SetAge sets the age field.
func (m *PatientMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *PatientMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *PatientMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *PatientMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *PatientMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetBrithday sets the brithday field.
func (m *PatientMutation) SetBrithday(t time.Time) {
	m.brithday = &t
}

// Brithday returns the brithday value in the mutation.
func (m *PatientMutation) Brithday() (r time.Time, exists bool) {
	v := m.brithday
	if v == nil {
		return
	}
	return *v, true
}

// OldBrithday returns the old brithday value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldBrithday(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBrithday is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBrithday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrithday: %w", err)
	}
	return oldValue.Brithday, nil
}

// ResetBrithday reset all changes of the "brithday" field.
func (m *PatientMutation) ResetBrithday() {
	m.brithday = nil
}

// AddDispenseIDs adds the dispenses edge to Dispense by ids.
func (m *PatientMutation) AddDispenseIDs(ids ...int) {
	if m.dispenses == nil {
		m.dispenses = make(map[int]struct{})
	}
	for i := range ids {
		m.dispenses[ids[i]] = struct{}{}
	}
}

// RemoveDispenseIDs removes the dispenses edge to Dispense by ids.
func (m *PatientMutation) RemoveDispenseIDs(ids ...int) {
	if m.removeddispenses == nil {
		m.removeddispenses = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddispenses[ids[i]] = struct{}{}
	}
}

// RemovedDispenses returns the removed ids of dispenses.
func (m *PatientMutation) RemovedDispensesIDs() (ids []int) {
	for id := range m.removeddispenses {
		ids = append(ids, id)
	}
	return
}

// DispensesIDs returns the dispenses ids in the mutation.
func (m *PatientMutation) DispensesIDs() (ids []int) {
	for id := range m.dispenses {
		ids = append(ids, id)
	}
	return
}

// ResetDispenses reset all changes of the "dispenses" edge.
func (m *PatientMutation) ResetDispenses() {
	m.dispenses = nil
	m.removeddispenses = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.firstname != nil {
		fields = append(fields, patient.FieldFirstname)
	}
	if m.lastname != nil {
		fields = append(fields, patient.FieldLastname)
	}
	if m.cardid != nil {
		fields = append(fields, patient.FieldCardid)
	}
	if m.allergic != nil {
		fields = append(fields, patient.FieldAllergic)
	}
	if m.age != nil {
		fields = append(fields, patient.FieldAge)
	}
	if m.brithday != nil {
		fields = append(fields, patient.FieldBrithday)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldFirstname:
		return m.Firstname()
	case patient.FieldLastname:
		return m.Lastname()
	case patient.FieldCardid:
		return m.Cardid()
	case patient.FieldAllergic:
		return m.Allergic()
	case patient.FieldAge:
		return m.Age()
	case patient.FieldBrithday:
		return m.Brithday()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldFirstname:
		return m.OldFirstname(ctx)
	case patient.FieldLastname:
		return m.OldLastname(ctx)
	case patient.FieldCardid:
		return m.OldCardid(ctx)
	case patient.FieldAllergic:
		return m.OldAllergic(ctx)
	case patient.FieldAge:
		return m.OldAge(ctx)
	case patient.FieldBrithday:
		return m.OldBrithday(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldFirstname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstname(v)
		return nil
	case patient.FieldLastname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastname(v)
		return nil
	case patient.FieldCardid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCardid(v)
		return nil
	case patient.FieldAllergic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllergic(v)
		return nil
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case patient.FieldBrithday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrithday(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, patient.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldFirstname:
		m.ResetFirstname()
		return nil
	case patient.FieldLastname:
		m.ResetLastname()
		return nil
	case patient.FieldCardid:
		m.ResetCardid()
		return nil
	case patient.FieldAllergic:
		m.ResetAllergic()
		return nil
	case patient.FieldAge:
		m.ResetAge()
		return nil
	case patient.FieldBrithday:
		m.ResetBrithday()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dispenses != nil {
		edges = append(edges, patient.EdgeDispenses)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeDispenses:
		ids := make([]ent.Value, 0, len(m.dispenses))
		for id := range m.dispenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddispenses != nil {
		edges = append(edges, patient.EdgeDispenses)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeDispenses:
		ids := make([]ent.Value, 0, len(m.removeddispenses))
		for id := range m.removeddispenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeDispenses:
		m.ResetDispenses()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	email            *string
	password         *string
	clearedFields    map[string]struct{}
	dispenses        map[int]struct{}
	removeddispenses map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddDispenseIDs adds the dispenses edge to Dispense by ids.
func (m *UserMutation) AddDispenseIDs(ids ...int) {
	if m.dispenses == nil {
		m.dispenses = make(map[int]struct{})
	}
	for i := range ids {
		m.dispenses[ids[i]] = struct{}{}
	}
}

// RemoveDispenseIDs removes the dispenses edge to Dispense by ids.
func (m *UserMutation) RemoveDispenseIDs(ids ...int) {
	if m.removeddispenses == nil {
		m.removeddispenses = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddispenses[ids[i]] = struct{}{}
	}
}

// RemovedDispenses returns the removed ids of dispenses.
func (m *UserMutation) RemovedDispensesIDs() (ids []int) {
	for id := range m.removeddispenses {
		ids = append(ids, id)
	}
	return
}

// DispensesIDs returns the dispenses ids in the mutation.
func (m *UserMutation) DispensesIDs() (ids []int) {
	for id := range m.dispenses {
		ids = append(ids, id)
	}
	return
}

// ResetDispenses reset all changes of the "dispenses" edge.
func (m *UserMutation) ResetDispenses() {
	m.dispenses = nil
	m.removeddispenses = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dispenses != nil {
		edges = append(edges, user.EdgeDispenses)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDispenses:
		ids := make([]ent.Value, 0, len(m.dispenses))
		for id := range m.dispenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddispenses != nil {
		edges = append(edges, user.EdgeDispenses)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeDispenses:
		ids := make([]ent.Value, 0, len(m.removeddispenses))
		for id := range m.removeddispenses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeDispenses:
		m.ResetDispenses()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
